<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go on A Blog</title>
    <link>http://blog.nickklauer.info/tags/go/index.xml</link>
    <description>Recent content in Go on A Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>2017 Nick Klauer</copyright>
    <atom:link href="http://blog.nickklauer.info/tags/go/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>XML in Go</title>
      <link>http://blog.nickklauer.info/2017/xml_in_go/</link>
      <pubDate>Sat, 25 Feb 2017 22:11:11 -0600</pubDate>
      
      <guid>http://blog.nickklauer.info/2017/xml_in_go/</guid>
      <description>&lt;p&gt;Recently, I had a problem that I thought I could toy with [Go][go] to solve.  I support a number of software
components written with a backend that heavily uses XML for definition data.  Most of these XML elements have
familiar namespace values that you would likely see in a SOAP service, or anything that used more than
your vanilla XML.&lt;/p&gt;

&lt;p&gt;Now, while XML is not even close to a new language or data format, I assumed that parsing and digging in to
XML would be pretty easy, relatively speaking.  Go has some pretty nifty ways to parse XML and JSON data&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>