<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>A Blog</title>
    <link>http://blog.nickklauer.info/tags/</link>
    <description>Recent content on A Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 19 Jul 2016 16:25:21 -0500</lastBuildDate>
    <atom:link href="http://blog.nickklauer.info/tags/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Adding Formatting and Parallelism</title>
      <link>http://blog.nickklauer.info/2016/trackello_parallelism/</link>
      <pubDate>Tue, 19 Jul 2016 16:25:21 -0500</pubDate>
      
      <guid>http://blog.nickklauer.info/2016/trackello_parallelism/</guid>
      <description>

&lt;h1 id=&#34;improved-formatting-in-trackello&#34;&gt;Improved Formatting in Trackello&lt;/h1&gt;

&lt;p&gt;I&amp;rsquo;ve been using my &lt;a href=&#34;https://github.com/klauern/trackello&#34;&gt;trackello&lt;/a&gt; app for
a few weeks and I do like the way I can keep track of my work.  However, some of
the things I was curious about were more specific to the card.  If you&amp;rsquo;ve used
this application, you may have noticed that activity is marked by repeated
entries of the same card.  This is just messy, and not something that I thought
would be usable if you had a particularly busy week.&lt;/p&gt;

&lt;p&gt;To remedy this, I set about fixing it up with some additional fields:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.nickklauer.info/img/trackello_colorized.png&#34; alt=&#34;trackello&#34; title=&#34;Trackello with statistics&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Specifically, I added a placeholder for some general-purpose statistics:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.nickklauer.info/img/trackello_statistics.png&#34; alt=&#34;statistics&#34; title=&#34;Statistics in Trackello&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I don&amp;rsquo;t have a very solid setup for how I want to layer this out at this time,
but it provides a lot more information for a particular card than before.  Now,
with a quick glance you can get a rough estimate on how much you&amp;rsquo;ve been
fiddling with a particular card.&lt;/p&gt;

&lt;h1 id=&#34;parallelism&#34;&gt;Parallelism&lt;/h1&gt;

&lt;p&gt;Once I added this in, I had to make some changes in terms of collecting the
actions for a board and being able to parse it out.  For whatever reason, I was
initially going about it in a very naive way, requesting a card or list for
&lt;strong&gt;every&lt;/strong&gt; action that I had.  This resulted in a couple issues off the bat:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Many actions result in many HTTP requests&lt;/li&gt;
&lt;li&gt;Duplicating the same &lt;code&gt;HTTP GET&lt;/code&gt; for the same card multiple times was
redundant.&lt;/li&gt;
&lt;li&gt;Each call was done in succession of the previous one, in order.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I first attempted to at least simplify how many calls I was making, ensuring
I was only making calls when I needed new information (such as a new Card that
I had not yet encountered).  However, that didn&amp;rsquo;t really speed things up, and
I found that it would wait 20-30 seconds just to return a Board&amp;rsquo;s Actions.&lt;/p&gt;

&lt;p&gt;Next, I pursued one of the things that Go is known for&amp;ndash;easy parallelism with
Goroutines.  I am not an expert in this stuff, but managed to wing it somehow.&lt;/p&gt;

&lt;p&gt;Using parallelism in Go is a lot easier than I intially thought it would be.
That isn&amp;rsquo;t to say it&amp;rsquo;s not fraught with concurrency issues, but it seems that
the scope of the issues is contained well enough that you can work out a lot of
the things that I used to get hung up on for DAYS with Java Threads and
concurrency there.&lt;/p&gt;

&lt;p&gt;I don&amp;rsquo;t have a quick comparison, but the performance improvement is noticable
off the bat, so I&amp;rsquo;m pretty confident in sticking with this.&lt;/p&gt;

&lt;h1 id=&#34;future-work&#34;&gt;Future work&lt;/h1&gt;

&lt;p&gt;I want to use this framework and library as the basis for something a little
more interesting.  I know that Trello is great for building a lot of different
kinds of sites, and one thing that I was really interested in is how &lt;a href=&#34;https://changelog.com&#34;&gt;The
Changelog&lt;/a&gt; uses Trello to build their weekly email.
I figure I can probably build something similar in Go and share it with the
world.  I don&amp;rsquo;t know if there&amp;rsquo;s another project out there for it, but I haven&amp;rsquo;t
yet been able to find one, so there&amp;rsquo;s an opening.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Adding Formatting and Parallelism</title>
      <link>http://blog.nickklauer.info/2016/trackello_parallelism/</link>
      <pubDate>Tue, 19 Jul 2016 16:25:21 -0500</pubDate>
      
      <guid>http://blog.nickklauer.info/2016/trackello_parallelism/</guid>
      <description>

&lt;h1 id=&#34;improved-formatting-in-trackello&#34;&gt;Improved Formatting in Trackello&lt;/h1&gt;

&lt;p&gt;I&amp;rsquo;ve been using my &lt;a href=&#34;https://github.com/klauern/trackello&#34;&gt;trackello&lt;/a&gt; app for
a few weeks and I do like the way I can keep track of my work.  However, some of
the things I was curious about were more specific to the card.  If you&amp;rsquo;ve used
this application, you may have noticed that activity is marked by repeated
entries of the same card.  This is just messy, and not something that I thought
would be usable if you had a particularly busy week.&lt;/p&gt;

&lt;p&gt;To remedy this, I set about fixing it up with some additional fields:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.nickklauer.info/img/trackello_colorized.png&#34; alt=&#34;trackello&#34; title=&#34;Trackello with statistics&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Specifically, I added a placeholder for some general-purpose statistics:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.nickklauer.info/img/trackello_statistics.png&#34; alt=&#34;statistics&#34; title=&#34;Statistics in Trackello&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I don&amp;rsquo;t have a very solid setup for how I want to layer this out at this time,
but it provides a lot more information for a particular card than before.  Now,
with a quick glance you can get a rough estimate on how much you&amp;rsquo;ve been
fiddling with a particular card.&lt;/p&gt;

&lt;h1 id=&#34;parallelism&#34;&gt;Parallelism&lt;/h1&gt;

&lt;p&gt;Once I added this in, I had to make some changes in terms of collecting the
actions for a board and being able to parse it out.  For whatever reason, I was
initially going about it in a very naive way, requesting a card or list for
&lt;strong&gt;every&lt;/strong&gt; action that I had.  This resulted in a couple issues off the bat:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Many actions result in many HTTP requests&lt;/li&gt;
&lt;li&gt;Duplicating the same &lt;code&gt;HTTP GET&lt;/code&gt; for the same card multiple times was
redundant.&lt;/li&gt;
&lt;li&gt;Each call was done in succession of the previous one, in order.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I first attempted to at least simplify how many calls I was making, ensuring
I was only making calls when I needed new information (such as a new Card that
I had not yet encountered).  However, that didn&amp;rsquo;t really speed things up, and
I found that it would wait 20-30 seconds just to return a Board&amp;rsquo;s Actions.&lt;/p&gt;

&lt;p&gt;Next, I pursued one of the things that Go is known for&amp;ndash;easy parallelism with
Goroutines.  I am not an expert in this stuff, but managed to wing it somehow.&lt;/p&gt;

&lt;p&gt;Using parallelism in Go is a lot easier than I intially thought it would be.
That isn&amp;rsquo;t to say it&amp;rsquo;s not fraught with concurrency issues, but it seems that
the scope of the issues is contained well enough that you can work out a lot of
the things that I used to get hung up on for DAYS with Java Threads and
concurrency there.&lt;/p&gt;

&lt;p&gt;I don&amp;rsquo;t have a quick comparison, but the performance improvement is noticable
off the bat, so I&amp;rsquo;m pretty confident in sticking with this.&lt;/p&gt;

&lt;h1 id=&#34;future-work&#34;&gt;Future work&lt;/h1&gt;

&lt;p&gt;I want to use this framework and library as the basis for something a little
more interesting.  I know that Trello is great for building a lot of different
kinds of sites, and one thing that I was really interested in is how &lt;a href=&#34;https://changelog.com&#34;&gt;The
Changelog&lt;/a&gt; uses Trello to build their weekly email.
I figure I can probably build something similar in Go and share it with the
world.  I don&amp;rsquo;t know if there&amp;rsquo;s another project out there for it, but I haven&amp;rsquo;t
yet been able to find one, so there&amp;rsquo;s an opening.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Trackello</title>
      <link>http://blog.nickklauer.info/2016/trackello/</link>
      <pubDate>Fri, 01 Jul 2016 20:31:12 -0400</pubDate>
      
      <guid>http://blog.nickklauer.info/2016/trackello/</guid>
      <description>

&lt;h1 id=&#34;trello-s-api-and-golang&#34;&gt;Trello&amp;rsquo;s API and Golang&lt;/h1&gt;

&lt;p&gt;Among some of &lt;a href=&#34;http://blog.nickklauer.info/2016/netgearlogs&#34;&gt;my&lt;/a&gt; &lt;a href=&#34;http://blog.nickklauer.info/2015/announcing_remy&#34;&gt;earlier&lt;/a&gt; &lt;a href=&#34;http://blog.nickklauer.info/2015/thoughts_on_go&#34;&gt;posts&lt;/a&gt;, I&amp;rsquo;ve been looking towards Golang
as a tool for building some more command-line apps.  To better understand how to
use it for HTTP-based client work, I wanted to build a small command-line app to
work with the &lt;a href=&#34;https://developers.trello.com/&#34;&gt;Trello API&lt;/a&gt;.  When working with it, I found a really excellent
Golang API for the Trello API here: &lt;a href=&#34;https://github.com/VojtechVitek/go-trello&#34;&gt;https://github.com/VojtechVitek/go-trello&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;trackello&#34;&gt;Trackello&lt;/h1&gt;

&lt;p&gt;Recently, my boss wanted to get a bi-weekly update of projects, tasks, and
things I&amp;rsquo;ve been working on.  This was more for him to have an idea what I was
putting my time into, as well as having evidence for promotions, bonuses, etc.
I track most of my work using Trello, so this seemed a perfect opportunity to
pull all of this information out using the built-in &lt;a href=&#34;https://developers.trello.com/&#34;&gt;Trello API&lt;/a&gt; that they so
wonderfully provided us users.&lt;/p&gt;

&lt;p&gt;Thus, let us introduce to the audience, &lt;a href=&#34;https://github.com/klauern/trackello/&#34;&gt;Trackello&lt;/a&gt;, a CLI to track your
work:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;Trackello is a command-line tool to allow you to retrieve and get
information on your Trello boards.  This tool provides a list
of the previous 14 days of information on a board defined in
your &#39;config&#39; file (see &#39;--config&#39; flag for info

Usage:
  trackello [command]

Available Commands:
  boards      List all of your boards
  cards       List all of the cards on a particular board.
  config      Configure your Trello API keys and preferred Trello Board
  list        List activities on a board

Flags:
      --appkey string   Trello Application Key
      --board string    Preferred Board ID
      --config string   config file (default is $HOME/.trackello.yaml)
  -h, --help            help for trackello
      --token string    Trello Token

Use &amp;quot;trackello [command] --help&amp;quot; for more information about a command.
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;configuration&#34;&gt;Configuration&lt;/h1&gt;

&lt;p&gt;To talk to the Trello API, you need two pieces:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Trello APP key&lt;/li&gt;
&lt;li&gt;Trello Token&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To get both of these, go to &lt;a href=&#34;https://trello.com/app-key&#34;&gt;https://trello.com/app-key&lt;/a&gt; .  You can get both the
Application key and a personal Token.  For my first iteration of this program, I
assumed you would want to get information for &lt;strong&gt;one&lt;/strong&gt; Trello board, which would
be your /preferred/ board.  This is not required for normal use, but makes things
easier.&lt;/p&gt;

&lt;p&gt;As always, the command-line options can help here:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ trackello help config
Using config file: /&amp;lt;your_home_dir&amp;gt;/.trackello.yaml
To communicate to a Trello API, you will need to configure a
minimum of 3 parameters:
  - TRELLO_APPKEY
  - TRELLO_TOKEN
  - preferredBoard

If you do not know or have any of these, you can review  the documentation
on this site: https://trello.com/app-key

Usage:
  trackello config [flags]

Global Flags:
      --appkey string   Trello Application Key
      --board string    Preferred Board ID
      --config string   config file (default is $HOME/.trackello.yaml)
      --token string    Trello Token
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you call this command and pass in the Global Flags, you will get
a &lt;code&gt;trackello.yaml&lt;/code&gt; file that has your configuration in it:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;$ cat ~/.trackello.yaml
appkey: f3ff39c83d227a7243abf4df66ffffff
token: b448d5fb4f1af85f3fffffffffffffffffffffffffffffffffffffffffffffff
board: 572ffff7ffffffffffffff83
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;listing-a-specific-board-s-actions&#34;&gt;Listing A Specific Board&amp;rsquo;s Actions&lt;/h1&gt;

&lt;p&gt;By default, the &lt;code&gt;trackello list&lt;/code&gt; command will show you a listing of all board
actions that occured in the last two weeks:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;listing-all-boards&#34;&gt;Listing All Boards&lt;/h1&gt;

&lt;p&gt;Further, you can also list all of your boards using &lt;code&gt;trackello boards&lt;/code&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Trackello</title>
      <link>http://blog.nickklauer.info/2016/trackello/</link>
      <pubDate>Fri, 01 Jul 2016 20:31:12 -0400</pubDate>
      
      <guid>http://blog.nickklauer.info/2016/trackello/</guid>
      <description>

&lt;h1 id=&#34;trello-s-api-and-golang&#34;&gt;Trello&amp;rsquo;s API and Golang&lt;/h1&gt;

&lt;p&gt;Among some of &lt;a href=&#34;http://blog.nickklauer.info/2016/netgearlogs&#34;&gt;my&lt;/a&gt; &lt;a href=&#34;http://blog.nickklauer.info/2015/announcing_remy&#34;&gt;earlier&lt;/a&gt; &lt;a href=&#34;http://blog.nickklauer.info/2015/thoughts_on_go&#34;&gt;posts&lt;/a&gt;, I&amp;rsquo;ve been looking towards Golang
as a tool for building some more command-line apps.  To better understand how to
use it for HTTP-based client work, I wanted to build a small command-line app to
work with the &lt;a href=&#34;https://developers.trello.com/&#34;&gt;Trello API&lt;/a&gt;.  When working with it, I found a really excellent
Golang API for the Trello API here: &lt;a href=&#34;https://github.com/VojtechVitek/go-trello&#34;&gt;https://github.com/VojtechVitek/go-trello&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;trackello&#34;&gt;Trackello&lt;/h1&gt;

&lt;p&gt;Recently, my boss wanted to get a bi-weekly update of projects, tasks, and
things I&amp;rsquo;ve been working on.  This was more for him to have an idea what I was
putting my time into, as well as having evidence for promotions, bonuses, etc.
I track most of my work using Trello, so this seemed a perfect opportunity to
pull all of this information out using the built-in &lt;a href=&#34;https://developers.trello.com/&#34;&gt;Trello API&lt;/a&gt; that they so
wonderfully provided us users.&lt;/p&gt;

&lt;p&gt;Thus, let us introduce to the audience, &lt;a href=&#34;https://github.com/klauern/trackello/&#34;&gt;Trackello&lt;/a&gt;, a CLI to track your
work:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;Trackello is a command-line tool to allow you to retrieve and get
information on your Trello boards.  This tool provides a list
of the previous 14 days of information on a board defined in
your &#39;config&#39; file (see &#39;--config&#39; flag for info

Usage:
  trackello [command]

Available Commands:
  boards      List all of your boards
  cards       List all of the cards on a particular board.
  config      Configure your Trello API keys and preferred Trello Board
  list        List activities on a board

Flags:
      --appkey string   Trello Application Key
      --board string    Preferred Board ID
      --config string   config file (default is $HOME/.trackello.yaml)
  -h, --help            help for trackello
      --token string    Trello Token

Use &amp;quot;trackello [command] --help&amp;quot; for more information about a command.
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;configuration&#34;&gt;Configuration&lt;/h1&gt;

&lt;p&gt;To talk to the Trello API, you need two pieces:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Trello APP key&lt;/li&gt;
&lt;li&gt;Trello Token&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To get both of these, go to &lt;a href=&#34;https://trello.com/app-key&#34;&gt;https://trello.com/app-key&lt;/a&gt; .  You can get both the
Application key and a personal Token.  For my first iteration of this program, I
assumed you would want to get information for &lt;strong&gt;one&lt;/strong&gt; Trello board, which would
be your /preferred/ board.  This is not required for normal use, but makes things
easier.&lt;/p&gt;

&lt;p&gt;As always, the command-line options can help here:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ trackello help config
Using config file: /&amp;lt;your_home_dir&amp;gt;/.trackello.yaml
To communicate to a Trello API, you will need to configure a
minimum of 3 parameters:
  - TRELLO_APPKEY
  - TRELLO_TOKEN
  - preferredBoard

If you do not know or have any of these, you can review  the documentation
on this site: https://trello.com/app-key

Usage:
  trackello config [flags]

Global Flags:
      --appkey string   Trello Application Key
      --board string    Preferred Board ID
      --config string   config file (default is $HOME/.trackello.yaml)
      --token string    Trello Token
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you call this command and pass in the Global Flags, you will get
a &lt;code&gt;trackello.yaml&lt;/code&gt; file that has your configuration in it:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;$ cat ~/.trackello.yaml
appkey: f3ff39c83d227a7243abf4df66ffffff
token: b448d5fb4f1af85f3fffffffffffffffffffffffffffffffffffffffffffffff
board: 572ffff7ffffffffffffff83
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;listing-a-specific-board-s-actions&#34;&gt;Listing A Specific Board&amp;rsquo;s Actions&lt;/h1&gt;

&lt;p&gt;By default, the &lt;code&gt;trackello list&lt;/code&gt; command will show you a listing of all board
actions that occured in the last two weeks:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;listing-all-boards&#34;&gt;Listing All Boards&lt;/h1&gt;

&lt;p&gt;Further, you can also list all of your boards using &lt;code&gt;trackello boards&lt;/code&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Java 9 Modularity Features</title>
      <link>http://blog.nickklauer.info/2016/jlinker-demo/</link>
      <pubDate>Wed, 29 Jun 2016 19:47:15 -0500</pubDate>
      
      <guid>http://blog.nickklauer.info/2016/jlinker-demo/</guid>
      <description>

&lt;h1 id=&#34;modularity-in-the-jvm&#34;&gt;Modularity in the JVM&lt;/h1&gt;

&lt;p&gt;I spent some time yesterday playing with the demos for the &lt;a href=&#34;http://openjdk.java.net/projects/jigsaw/quick-start&#34;&gt;Jigsaw Project&lt;/a&gt;,
and have something that I hope is usable for others:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/klauern/modularity&#34;&gt;github.com/klauern/modularity&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I haven&amp;rsquo;t yet tried it on a Windows machine, but that&amp;rsquo;s next on my list.  Each
of the examples in the Jigsaw Quick Start have an associated &lt;code&gt;run.sh&lt;/code&gt; script
that will build the example.  I haven&amp;rsquo;t done much documenting, but I do suggest
that if you&amp;rsquo;re looking at these examples, you follow along with the
documentation.  It&amp;rsquo;s pretty good, and does a much better job explaining the
steps than I can.&lt;/p&gt;

&lt;h2 id=&#34;jlinker-sizes&#34;&gt;JLinker sizes&lt;/h2&gt;

&lt;p&gt;The biggest reason I wanted to play with the Jigsaw features was to see how the
&lt;code&gt;jlink&lt;/code&gt;er worked in terms of generating a self-contained JVM+runnable app.  I&amp;rsquo;m
pretty happy with it, and think that it&amp;rsquo;s pretty slick, all things considered.
The downside is just the size.  I&amp;rsquo;m sure that it&amp;rsquo;s a massive effort to slim down
the JVM to what is absolutely needed to run the code you have, but the smallest
example I could run on my MacBook Air was around ~33MB.  That&amp;rsquo;s pretty good, but
still pretty large (at least compared to a similarly-written Golan project).
I think that things are probably trending even further downward, so I wouldn&amp;rsquo;t
be surprised to see further interations of this slim it down further, or even
finding some excited hackers able to shrink it even further themselves.  At this
point, I&amp;rsquo;m really hopeful, and think that this is a pretty nice addition the
JVM.  More competition is always a good thing.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>