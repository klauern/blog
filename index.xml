<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>A Turn of Phrase</title>
    <link>http://blog.nickklauer.info/</link>
    <description>Recent content on A Turn of Phrase</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 29 Oct 2015 08:26:23 -0500</lastBuildDate>
    <atom:link href="http://blog.nickklauer.info/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Thoughts On Go</title>
      <link>http://blog.nickklauer.info/2015/thoughts_on_go/</link>
      <pubDate>Thu, 29 Oct 2015 08:26:23 -0500</pubDate>
      
      <guid>http://blog.nickklauer.info/2015/thoughts_on_go/</guid>
      <description>

&lt;h1 id=&#34;learning-go:50ebbeb44ee3a6193481af0c7b0581a2&#34;&gt;Learning Go&lt;/h1&gt;

&lt;p&gt;I started wanting to write small applications that were portable
and compatible with many platforms.  I have a lot of experience working with
Java, and while I do well enough with that language, I found the need to package
an entire JVM runtime along with an &lt;a href=&#34;http://stackoverflow.com/questions/11947037/what-is-an-uber-jar&#34;&gt;uberjar&lt;/a&gt;
somewhat unsettling.  In addition, the startup time for the JVM to spin up
to run small, client-side applications was a bit of a turnoff to me.  The JVM is
great when it runs for a long period of time, but it is lacking in providing that fast
bootstrap times you need to make a Unix-like CLI tool.&lt;/p&gt;

&lt;p&gt;I agree that it doesn&amp;rsquo;t take long to learn the language, but I probably spent
months of 1-2 hour increments learning it.  I would say overall, I probably
clocked in a day or two of total time committed before I felt comfortable, but
that was with a lot of &amp;ldquo;hammock time&amp;rdquo; in between.
I personally think the little nuggets I picked up in between sessions gave me
time to let the information ferment in my brain, so picking up the
next little bit wasn&amp;rsquo;t as much of a chore.&lt;/p&gt;

&lt;p&gt;In that amount of time, I&amp;rsquo;ve written a couple small applications, and I can&amp;rsquo;t
say I had too many nightmares using it.
That said, I am not necessarily impressed with the &lt;em&gt;language&lt;/em&gt;.  That&amp;rsquo;s not what
drives me to use it, though.&lt;/p&gt;

&lt;h1 id=&#34;the-platform-is-great:50ebbeb44ee3a6193481af0c7b0581a2&#34;&gt;The Platform is Great&lt;/h1&gt;

&lt;p&gt;One of the first things that I was drawn to was the ease in creating small,
self-contained little applications.  I found things like
&lt;a href=&#34;https://gohugo.io&#34;&gt;Hugo&lt;/a&gt;&amp;rsquo;s static site generator to be pretty slick and
compelling (and if you haven&amp;rsquo;t noticed, I&amp;rsquo;ve taken it up for my own blog and
homepage).  Then, other little tools started popping up, providing a lot of
really cool, cross-platform features.  Things like &lt;a href=&#34;https://github.com/monochromegane/the_platinum_searcher&#34;&gt;the_platinum_searcher&lt;/a&gt;
work on Windows, for pete&amp;rsquo;s sake.  This just isn&amp;rsquo;t the norm.  I give lots of
kudos to any language developer willing to put the time in to making Windows a
first-class platform to develop on.  My experience with many other languages are
just not as great.  In my own case, I am stuck at work using Windows for my
desktop, and with it, I have had to resort to a lifetime of Googling
&amp;ldquo;Alterative to X for Windows&amp;rdquo; kinds of searches for every little tool I like in Linux.&lt;/p&gt;

&lt;p&gt;With Go, I&amp;rsquo;m at least able to get these small applications and command-line
tools working on Windows with as much ease as I do on Linux/Mac.  A quick &lt;code&gt;go
get &amp;lt;package-name&amp;gt;&lt;/code&gt; and I&amp;rsquo;m done.  Simple as that.&lt;/p&gt;

&lt;p&gt;Some of the tools that I really like that are built in Go and /just work/ on
Windows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gohugo.io&#34;&gt;hugo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/monochromegane/the_platinum_searcher&#34;&gt;the_platinum_searcher&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/github/hub&#34;&gt;hub&lt;/a&gt; (GitHub command-line app)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://vaultproject.io/&#34;&gt;vault&lt;/a&gt; (secret-store)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And on and on.  Frankly, it&amp;rsquo;s gotten so easy in Go 1.5 that compiling to Windows
is simply changing &lt;code&gt;GOOS=windows&lt;/code&gt; and you&amp;rsquo;re done.  &lt;strong&gt;I love that&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;This is part of the reason I enjoyed programming in Java so much when I was learning
it.  The sales pitch of &amp;ldquo;write once, run anywhere&amp;rdquo; is really compelling, especially when you
realize the effort it takes to do a &lt;em&gt;proper&lt;/em&gt; job of making a cross-platform
application.  Just look at the discrepencies between any iOS application and an
equivalent Android one.  It&amp;rsquo;s not simply &lt;strong&gt;hard&lt;/strong&gt; to make it look good or work
consistently on both&amp;ndash;it&amp;rsquo;s oftentimes runs completely at odds with how that system is even
designed to work.&lt;/p&gt;

&lt;p&gt;In Go, I&amp;rsquo;m restricting myself to applications that run on the command-line, so
I&amp;rsquo;m not necessarily concerned or interested in GUI applications.&lt;/p&gt;

&lt;p&gt;With the prevalence of new tools and applications out there written in Go, it&amp;rsquo;s
pretty clear that many people are able to make good use of their
time and deliver working applications in Go and release it to the masses.  I can
attest to the ease in the compile/retest cycle, and I attribute the ability to
release an application quickly is due&amp;ndash;in part&amp;ndash;to the speed of compilation.&lt;/p&gt;

&lt;p&gt;So, with all of these benefits, I think the platform and community are doing
a good job promoting the features of Go that make &lt;strong&gt;Go the Platform&lt;/strong&gt; better than
&lt;strong&gt;Go the Language&lt;/strong&gt;.  With that said&amp;hellip;&lt;/p&gt;

&lt;h1 id=&#34;the-language-is-not:50ebbeb44ee3a6193481af0c7b0581a2&#34;&gt;The Language is Not&lt;/h1&gt;

&lt;p&gt;I don&amp;rsquo;t think it&amp;rsquo;s necessary to rehash the arguments against the language.
Plenty of people more experienced and knowledgable with Go have already done
that.  Let me link to a few articles that piqued my interest. In most
of these, I found myself nodding in agreement on their conclusions and experiences:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.evanmiller.org/four-days-of-go.html&#34;&gt;Four Days of Go&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://nomad.so/2015/03/why-gos-design-is-a-disservice-to-intelligent-programmers/&#34;&gt;Why Go&amp;rsquo;s design is a disservice to intelligent programmers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I don&amp;rsquo;t think &lt;a href=&#34;http://www.evanmiller.org/four-days-of-go.html&#34;&gt;Evan Miller&amp;rsquo;s piece&lt;/a&gt; was meant to be a critique &lt;em&gt;against&lt;/em&gt;
the language, it is probably one of the better rantings about both the good and
bad parts of Go as a language:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Reading Go’s mailing list and documentation, I get a similar sense of
refusal-to-engage — the authors are communicative, to be sure, but in a
didactic way. They seem tired of hearing people’s ideas, as if they’ve already
thought of everything, and the relative success of Go at Google and elsewhere
has only led them to turn the volume knob down. Which is a shame, because
they’ll probably miss out on some good ideas (including my highly compelling,
backwards-incompatible, double-triple-colon-assignment proposal mentioned
above).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I can&amp;rsquo;t say I felt any different about it.  It&amp;rsquo;s certainly one of those
languages where you want to ask &amp;ldquo;How do I do X in Go?&amp;rdquo; Usually, I see both on
StackOverflow posts as well as the Google Group, the response is not,
&amp;ldquo;think in Go&amp;rdquo;, but &amp;ldquo;Go doesn&amp;rsquo;t allow you to to do X because X is
(add argument for explicit vs. implicit here, or something
about compilers doing too much for you)&amp;rdquo;&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s pretty easy to dismiss a lot of language features that people like that
way, and I&amp;rsquo;m not necessarily one to argue for having more complexity, but I am
quite turned off by the &lt;a href=&#34;https://golang.org/doc/faq#Why_doesnt_Go_have_feature_X&#34;&gt;arguments for missing features&lt;/a&gt;, wondering
when the designers of the language decided that most things beyond C-like
languages were not necessary:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If it bothers you that Go is missing feature X, please forgive us and
investigate the features that Go does have. You might find that they
compensate in interesting ways for the lack of X.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Or that they completely punt on it, or expect the &lt;a href=&#34;https://docs.google.com/document/d/1Bz5-UB7g2uPBdOx-rw5t9MxJwkfpx90cqG9AFL0JAYo/edit&#34;&gt;community to pick up the
slack&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The most damning critique of the language&amp;ndash;and one that I think doesn&amp;rsquo;t get
enough attention&amp;ndash;is in &lt;a href=&#34;http://nomad.so/2015/03/why-gos-design-is-a-disservice-to-intelligent-programmers/&#34;&gt;the third article&lt;/a&gt;.  The fact that they
feel it&amp;rsquo;s either not worth the time or simply adds too much &amp;ldquo;complexity&amp;rdquo; on some
measurable complexity bar, just seems ridiculous.&lt;/p&gt;

&lt;h1 id=&#34;so-which-language-do-you-use:50ebbeb44ee3a6193481af0c7b0581a2&#34;&gt;So which language do you use?&lt;/h1&gt;

&lt;p&gt;When writing in Go, you realize that you&amp;rsquo;re writing code for the sake of
compilation speed and concurrency.  The benefit of generating a self-contained,
statically linked binary can&amp;rsquo;t be overlooked, but in terms of what else it
offers,  I don&amp;rsquo;t think there are any other features, frankly.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m not going to ignore it, but lacking generics should continue to
be lambasted as a cop-out for some perceived trade-off that the designers didn&amp;rsquo;t
want to make.  While they haven&amp;rsquo;t addressed it, you as a developer are torn
between three very ugly options:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Code generation in comments&lt;/li&gt;
&lt;li&gt;Hand-write multiple variants of the same function taking slightly different
parameters.&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;interface{}&lt;/code&gt; everywhere, basically saying f&amp;rsquo;it to the type system.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;As a developer, it&amp;rsquo;s just as important to stay ahead of the curve
on programming trends, fads, and phases.  Just as software teams are &amp;ldquo;Java
shops&amp;rdquo;, &amp;ldquo;Python shops&amp;rdquo;, &amp;ldquo;Cool, Fad-like Language shop&amp;rdquo;, you will still want to be
aware of and probably reasonably proficient in a popular language or two.  Go&amp;rsquo;s
not terrible, but that&amp;rsquo;s mostly due to the platform and community.&lt;/p&gt;

&lt;p&gt;You do need to keep your eye out for shiny things.  People still code in C,
so it&amp;rsquo;s had a surprisingly long lifetime.  Ruby seemed to be pretty awesome for
a while, but it&amp;rsquo;s becoming obvious at this point that it&amp;rsquo;s not the hot language
to learn.  Same for Python, same for Java.&lt;/p&gt;

&lt;p&gt;Guess what?  Those languages didn&amp;rsquo;t go away.  Go probably won&amp;rsquo;t either.&lt;/p&gt;

&lt;p&gt;The tl;dr of this is that while I think Go is a poor language, you&amp;rsquo;re probably
going to be stuck using it in some form or fashion down the line, so don&amp;rsquo;t
dismiss it out of hand.  The platform is pretty good, the tooling around it
seems to be getting better, and it&amp;rsquo;s surprisingly effective for as simple as it
is.&lt;/p&gt;

&lt;p&gt;I always keep an eye open for new things, and while I don&amp;rsquo;t particularly
&lt;strong&gt;like&lt;/strong&gt; Go as a language, I think the platform is top-notch, making up for
a lot of the language&amp;rsquo;s shortcomings.  Time will tell whether these older,
legacy applications actually stand up to scrutiny.  It seems to me you don&amp;rsquo;t
find the weaknesses in the language until years after people have to maintain
these older systems.  Only then will you realize whether the claims about
maintainability hold true.  I&amp;rsquo;m not going to judge Go on that until I have more
time with it, for sure.&lt;/p&gt;

&lt;p&gt;Until then, feel free to contribute and make tools that work.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Remy - RESTful client for WebLogic Servers</title>
      <link>http://blog.nickklauer.info/2015/announcing_remy/</link>
      <pubDate>Sun, 18 Oct 2015 10:44:48 -0500</pubDate>
      
      <guid>http://blog.nickklauer.info/2015/announcing_remy/</guid>
      <description>

&lt;p&gt;I&amp;rsquo;ve been learning the &lt;a href=&#34;https://golang.org&#34;&gt;Go&lt;/a&gt; programming language for the
past few months.  I can&amp;rsquo;t say I&amp;rsquo;m totally smitten with the language, but with
it&amp;rsquo;s ability to produce self-contained, cross-platform binaries, it is really
compelling, language semantics aside.&lt;/p&gt;

&lt;p&gt;Anyways, while working with Go, I tried to find out how easy it would be to
generate really useful, self-contained command-line applications.  I don&amp;rsquo;t have
nearly the same need for the concurrency features that Go provides, but I&amp;rsquo;m
certain that the stepping-stone to getting there is to be able to create small,
focused tools, adding concurrency as needed afterwards.&lt;/p&gt;

&lt;h1 id=&#34;weblogic-restful-management-services:37b48de942ca676c4cd059402ad010ab&#34;&gt;WebLogic RESTful Management Services&lt;/h1&gt;

&lt;p&gt;This isn&amp;rsquo;t exactly a &lt;strong&gt;new&lt;/strong&gt; feature of WebLogic server, but Oracle built in
a set &lt;a href=&#34;http://docs.oracle.com/cd/E23943_01/web.1111/e24682/toc.htm#RESTS149&#34;&gt;of RESTful API&amp;rsquo;s&lt;/a&gt;
that let you query an Administration Server for various statistics of your
managed servers in a domain.  You can use whatever kind of tool to query this,
like &lt;code&gt;curl&lt;/code&gt;, &lt;code&gt;wget&lt;/code&gt;, etc., but I thought it might be fun to try to wrap this
into some kind of command-line tool.&lt;/p&gt;

&lt;h1 id=&#34;enter-remy:37b48de942ca676c4cd059402ad010ab&#34;&gt;Enter Remy&lt;/h1&gt;

&lt;p&gt;That&amp;rsquo;s where I came up with the &lt;a href=&#34;https://github.com/klauern/remy&#34;&gt;Remy command-line
application&lt;/a&gt;.  Remy is really
just a play on vocabulary for &lt;strong&gt;RESTful Management Extensions&lt;/strong&gt;, REME(long-E).&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s a lot of features that Oracle put in place with the WebLogic RESTful
Management Services, so typing &lt;code&gt;remy help&lt;/code&gt; will get you familiarized with
&lt;em&gt;what&lt;/em&gt;&amp;rsquo;s available:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;C:\
&amp;gt; remy help
Query a WebLogic Domain&#39;s resources, including Datasources, Applications, Clusters, and Servers by using the WebLogic RESTful Management Extensions API

Usage:
  remy [command]

Available Commands:
  applications Query applications deployed under AdminServer
  config       Configure the credentials and server to default REST connections to
  clusters     Query clusters under AdminServer
  datasources  Query datasources under AdminServer
  servers      Display Server information
  version      Show the version of this command

Flags:
  -s, --adminurl=&amp;quot;http://localhost:7001&amp;quot;: Url for the Admin Server
  -f, --full-format[=false]: Return full format from REST server
  -p, --password=&amp;quot;welcome1&amp;quot;: Password for the user
  -u, --username=&amp;quot;weblogic&amp;quot;: Username with privileges to access AdminServer

Use &amp;quot;remy [command] --help&amp;quot; for more information about a command.
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;querying:37b48de942ca676c4cd059402ad010ab&#34;&gt;Querying&lt;/h2&gt;

&lt;p&gt;All commands require some form of the &lt;code&gt;AdminUrl&lt;/code&gt;, &lt;code&gt;Password&lt;/code&gt; and &lt;code&gt;Username&lt;/code&gt;, in
order to query an appropriate AdminServer instance.  This can be specified on
the command-line with the global &lt;code&gt;--adminurl&lt;/code&gt;, &lt;code&gt;--password&lt;/code&gt;, and &lt;code&gt;--username&lt;/code&gt;
flags, respectively:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;$ remy servers --adminurl &amp;quot;http://adminServer:7001&amp;quot; --password &amp;quot;welcome1&amp;quot; --username &amp;quot;weblogic&amp;quot;
Finding all Servers
Using Full Format? false
Name:        AdminServer   | State:           RUNNING       | Health:        HEALTH_OK
Cluster:                   | CurrentMachine:                | JVM Load:      0
Sockets #:   0             | Heap Sz Cur:     0             | Heap Free Cur: 0
Java Ver:                  | OS Name:                       | OS Version:
WLS Version:

Name:        WLS_WSM1      | State:           RUNNING       | Health:        HEALTH_OK
Cluster:                   | CurrentMachine:                | JVM Load:      0
Sockets #:   0             | Heap Sz Cur:     0             | Heap Free Cur: 0
Java Ver:                  | OS Name:                       | OS Version:
WLS Version:

Name:        WLS_SOA1      | State:           RUNNING       | Health:        HEALTH_OK
Cluster:                   | CurrentMachine:                | JVM Load:      0
Sockets #:   0             | Heap Sz Cur:     0             | Heap Free Cur: 0
Java Ver:                  | OS Name:                       | OS Version:
WLS Version:

Name:        WLS_OSB1      | State:           RUNNING       | Health:        HEALTH_OK
Cluster:                   | CurrentMachine:                | JVM Load:      0
Sockets #:   0             | Heap Sz Cur:     0             | Heap Free Cur: 0
Java Ver:                  | OS Name:                       | OS Version:
WLS Version:
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;configuration:37b48de942ca676c4cd059402ad010ab&#34;&gt;Configuration&lt;/h2&gt;

&lt;p&gt;Typing in the username, password, etc., on the command-line is not really the
greatest way to solve the problem, and is very likely insecure, so we can do one
better.  With Remy, I implemented a &lt;a href=&#34;https://github.com/toml-lang/toml&#34;&gt;&lt;code&gt;TOML&lt;/code&gt;&lt;/a&gt;-formatted
configuration format.  It looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;AdminURL = &amp;quot;http://adminserver.local:7001&amp;quot;
Username = &amp;quot;weblogic&amp;quot;
Password = &amp;quot;welcome1&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, you may think, &amp;ldquo;That password is in plain text&amp;rdquo;.  You&amp;rsquo;d be correct. The way
to configure this how you like is to call the &lt;code&gt;remy config --local --password
&#39;password&#39;&lt;/code&gt;, or &lt;code&gt;$env:PASSWD&lt;/code&gt; environment variable, or whatever you like doing
in Bash (maybe &lt;code&gt;read -s PASSWD&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Now, you can look at the file and see that it is at least encrypted/abstracted
a bit using a built-in encryption key:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;C:\
λ cat .\wlsrest.toml
AdminURL = &amp;quot;http://adminserver.local:7001&amp;quot;
Username = &amp;quot;weblogic&amp;quot;
Password = &amp;quot;{AES}LR8d4zIdsRl0CqmKRvVBDuk3&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The next thought that you might have &amp;ldquo;well, you&amp;rsquo;re using a plainly-visible,
known, searchable-on-your-repo, password.  Yes, you&amp;rsquo;re correct.  I love smart
people.  Well, you can supply your own environment variable for it, too:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;$ export WLS_REMYKEY=&amp;quot;My very very very awesome key!!!&amp;quot; # (MUST be 32 bytes in length EXACTLY)
$ remy config --local
$ cat .\wlsrest.toml
AdminURL = &amp;quot;http://adminserver.local:7001&amp;quot;
Username = &amp;quot;weblogic&amp;quot;
Password = &amp;quot;{AES}BM1uj9uv1bD7KV6BXapCf1kucxDYbCU6&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But I&amp;rsquo;m sure there&amp;rsquo;s other implications here.  I&amp;rsquo;d like to keep going down the
rabbit-hole, but honestly, I&amp;rsquo;m really waiting for &lt;a href=&#34;https://vaultproject.io/&#34;&gt;Hashicorp Vault&lt;/a&gt;
to support LDAP a lot better than their current version (0.3.1 is pretty
rudimentary for LDAP).  In that event, I&amp;rsquo;d be all for getting that secret from
Vault.  Although, I think that the &lt;a href=&#34;https://www.yubico.com/products/yubikey-hardware/&#34;&gt;FIDO U2F Yubikey&lt;/a&gt;
is probably even cooler when you get down to it, but I digress.&lt;/p&gt;

&lt;h1 id=&#34;source-code-information-and-errata:37b48de942ca676c4cd059402ad010ab&#34;&gt;Source Code, Information and Errata&lt;/h1&gt;

&lt;p&gt;I&amp;rsquo;ve really only touched the surface of this tool.  I think you should take
a look at it yourself:&lt;/p&gt;

&lt;p&gt;GitHub Source Code
- &lt;a href=&#34;https://github.com/klauern/remy&#34;&gt;https://github.com/klauern/remy&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As I&amp;rsquo;ve mentioned before, this is probably my second or third GoLang application
(I&amp;rsquo;m goign to call it Golang, so all you &amp;ldquo;It&amp;rsquo;s called Go&amp;rdquo;, zealots need to get
a life and realize Google search sucks with 2 letter
verbs-used-as-programming-languages) so I am open to learning and finding out
more about whether you think that the form is good.  I&amp;rsquo;m not really looking for
critiques on whether or not it&amp;rsquo;s easier solved in a set of &lt;code&gt;curl&lt;/code&gt; or &lt;code&gt;httpie&lt;/code&gt;
commands, because that&amp;rsquo;s not what I wrote it for.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>keystores and certificate expiration</title>
      <link>http://blog.nickklauer.info/2015/keystores-and-certificate-expiration/</link>
      <pubDate>Thu, 15 Oct 2015 20:02:18 -0500</pubDate>
      
      <guid>http://blog.nickklauer.info/2015/keystores-and-certificate-expiration/</guid>
      <description>

&lt;p&gt;I&amp;rsquo;ve seldom had to work with the Java Keystore, but as more and more sites start
using SSL, it&amp;rsquo;s grown more important to ensure that certificates stored on your
side don&amp;rsquo;t arbitrarily expire.  This is especially important if you&amp;rsquo;re not
simply relying or verifying intermediate and root certificates.  A self-signed
server certificate is oftentimes &lt;em&gt;easy enough&lt;/em&gt; to do for some applications, and
that expiration can come quicker than you anticipate.&lt;/p&gt;

&lt;p&gt;In this section, I&amp;rsquo;ll demonstrate a little bit about how you can get at the
certificate store within the relatively standard JKS-format of the Java
Cryptography Keystore.  Other stores may not work this way, or may require
a different set of processes.&lt;/p&gt;

&lt;p&gt;Side Note: I have to give credit where credit is due, and &lt;a href=&#34;http://stackoverflow.com/a/10986535/7008&#34;&gt;this StackOverflow
answer&lt;/a&gt;
provided a great starting point for getting things going.  It was essentially
the foundation for what you&amp;rsquo;ll see in this post.&lt;/p&gt;

&lt;h1 id=&#34;parsing-the-keystore:ea83c6f13264b77e32b6387eb48f3ca8&#34;&gt;Parsing the Keystore&lt;/h1&gt;

&lt;p&gt;To make this easy, I generally use the following libraries in most of my
projects:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/google/guava&#34;&gt;Google Guava&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.joda.org/joda-time/&#34;&gt;Joda Time&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Of course, if you&amp;rsquo;re lucky enough to use Java 8, we&amp;rsquo;d be using
&lt;a href=&#34;http://www.oracle.com/technetwork/articles/java/jf14-date-time-2125367.html&#34;&gt;Java 8&amp;rsquo;s Date and Time&lt;/a&gt;
library.  But, for a vast majority of users, we&amp;rsquo;re stuck with 7 or less.
Ah, c&amp;rsquo;est la vie.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Reading the Keystore is actually a pretty straight-forward process:&lt;/p&gt;

&lt;pre&gt;
&lt;code class=&#34;language-java&#34;&gt;
// import a ton of stuff
import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import org.joda.time.DateTime;
import org.joda.time.Days;

import java.io.FileInputStream;
import java.io.IOException;
import java.security.KeyStore;
import java.security.KeyStoreException;
import java.security.NoSuchAlgorithmException;
import java.security.UnrecoverableEntryException;
import java.security.cert.Certificate;
import java.security.cert.CertificateException;
import java.security.cert.X509Certificate;
import java.util.*;

// ... more code, some method somewhere

KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());
char[] pass = &#34;changeit&#34;; // or whatever

java.io.InputStream fis = null;
try {
    fis = Reader.class.getClassLoader().getResourceAsStream(file_path);
    ks.load(fis, pass);

    // Get Certificate listing

} finally {
    if (fis != null) {
        fis.close();
    }
}
&lt;/code&gt;
&lt;/pre&gt;

&lt;h1 id=&#34;traversing-certificates-and-aliases:ea83c6f13264b77e32b6387eb48f3ca8&#34;&gt;Traversing Certificates and Aliases&lt;/h1&gt;

&lt;p&gt;From this point, we&amp;rsquo;re able to read in and claim &lt;strong&gt;success&lt;/strong&gt;! Nah, not really.
What do you want to do with this?  Well, in this case, our KeyStore will have
a lot of various certificates and trusts in it.  For our use, we simply want to
validate the ones that are going to expire.&lt;/p&gt;

&lt;p&gt;With each certificate that we have, there are likely 1 or more other
certificates in a &lt;a href=&#34;https://support.dnsimple.com/articles/what-is-ssl-certificate-chain/&#34;&gt;&lt;strong&gt;certificate chain&lt;/strong&gt;&lt;/a&gt;.
We aren&amp;rsquo;t simply going to find expired server certificates (although that&amp;rsquo;s
laudable in and of itself), but we want to be sure we aren&amp;rsquo;t going to suffer the
fate of thinking &amp;ldquo;well, our server cert passed, but this whole tree of servers&amp;rsquo;
intermediate certificates expired&amp;rdquo;.&lt;/p&gt;

&lt;pre&gt;
&lt;code class=&#34;language-java&#34;&gt;
private static Map&lt;String, List&lt;Certificate&gt;&gt; getCertMap(KeyStore ks) throws KeyStoreException {
    Map&lt;String, List&lt;Certificate&gt;&gt; cert_map = Maps.newHashMap(); // Good &#39;ol Guava
    // Each KeyStore can return an &#34;Enumeration&#34; of aliases
    Enumeration&lt;String&gt; aliases = ks.aliases();
    while (aliases.hasMoreElements()) {
        String alias = aliases.nextElement();
        Certificate[] certs = ks.getCertificateChain(alias);
        // It&#39;s not a guarantee that you&#39;ll have ANY certificates
        if (certs != null &amp;&amp; certs.length &gt; 0) {
            cert_map.put(alias, Lists.newArrayList(certs));
        } else {
            Certificate cert = ks.getCertificate(alias);
            cert_map.put(alias, Lists.newArrayList(cert));
        }
    }
    return cert_map;
}
&lt;/code&gt;
&lt;/pre&gt;

&lt;h1 id=&#34;filtering:ea83c6f13264b77e32b6387eb48f3ca8&#34;&gt;Filtering&lt;/h1&gt;

&lt;p&gt;Another assumption being made here is that if you have a certificate that&amp;rsquo;s
going to expire, it&amp;rsquo;s most likely an &lt;strong&gt;X.509&lt;/strong&gt; certificate, and so we only need
to be concerned with a subset of certificates.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;
    private static Map&lt;String, List&lt;X509Certificate&gt;&gt; filterX509Certs(Map&lt;String, List&lt;Certificate&gt;&gt; cert_map) {
        Map&lt;String, List&lt;X509Certificate&gt;&gt; x509_map = Maps.newHashMap();
        for (Map.Entry&lt;String, List&lt;Certificate&gt;&gt; c : cert_map.entrySet()) {
            List&lt;X509Certificate&gt; certs = Lists.newArrayListWithCapacity(c.getValue().size());
            for (Certificate cert : c.getValue()) {
                // This is where the magic happens...
                if (cert.getType().equals(&#34;X.509&#34;)) {
                    // cast the type to X509Certificate
                    certs.add((X509Certificate) cert);
                }
            }
            x509_map.put(c.getKey(), certs);
        }
        return x509_map;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It took a lot longer to figure out that this one little line&lt;/p&gt;

&lt;pre&gt;
&lt;code class=&#34;language-java&#34;&gt;if (cert.getType().equals(&#34;X.509&#34;)) {
&lt;/code&gt;
&lt;/pre&gt;
is where you figure out the type.

# Finding by Date

Now that we have a mapped-listing of X.509 certificates and their chains mapped
to an alias, we can iterate over them to find by date:

&lt;pre&gt;
&lt;code class=&#34;language-java&#34;&gt;
private static List&lt;X509Certificate&gt; filterCertificates(List&lt;X509Certificate&gt; certs, int days_threshold) {
    List&lt;X509Certificate&gt; filtered = Lists.newArrayList();
    for (X509Certificate cert : certs) {
        DateTime expiration_date = new DateTime(cert.getNotAfter());
        int days_to_expiration = Days.daysBetween(DateTime.now(), expiration_date.getDays();
        if (days_to_expiration &lt; days_threshold) {
            filtered.add(cert);
        }
    }
    return filtered;
}
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;Here, we&amp;rsquo;re simply making use of the excellent &lt;a href=&#34;http://www.joda.org/joda-time/quickstart.html&#34;&gt;Joda DateTime&lt;/a&gt;
to parse the &lt;code&gt;java.util.Date&lt;/code&gt; object and compute the days between the curren
time and the expiration date.  I&amp;rsquo;d rather not worry about leap years, other
calendar types, etc., when computing things, so let&amp;rsquo;s just let a great library
do that for us.&lt;/p&gt;

&lt;h1 id=&#34;summary:ea83c6f13264b77e32b6387eb48f3ca8&#34;&gt;Summary&lt;/h1&gt;

&lt;p&gt;I hope this overview of how to parse and compute expiration dates on
certificates in your Keystore can be of some use.  It&amp;rsquo;s not hard, but half the
battle is figuring out &lt;strong&gt;what&lt;/strong&gt; you need to know before you do it.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>